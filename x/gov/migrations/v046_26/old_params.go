package v046_26

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OldVotingParams defines the params for voting on governance proposals.
type OldVotingParams struct {
	//  Length of the voting period.
	VotingPeriod *time.Duration `protobuf:"bytes,1,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period,omitempty"`
}

func (m *OldVotingParams) Reset()         { *m = OldVotingParams{} }
func (m *OldVotingParams) String() string { return proto.CompactTextString(m) }
func (*OldVotingParams) ProtoMessage()    {}
func (*OldVotingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05cb1c0d030febb, []int{6}
}
func (m *OldVotingParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldVotingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldVotingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingParams.Merge(m, src)
}
func (m *OldVotingParams) XXX_Size() int {
	return m.Size()
}
func (m *OldVotingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingParams.DiscardUnknown(m)
}

var xxx_messageInfo_VotingParams proto.InternalMessageInfo

func (m *OldVotingParams) GetVotingPeriod() *time.Duration {
	if m != nil {
		return m.VotingPeriod
	}
	return nil
}

func init() {
	proto.RegisterType((*OldVotingParams)(nil), "cosmos.gov.v1.VotingParams")
}

func init() { proto.RegisterFile("cosmos/gov/v1/gov.proto", fileDescriptor_e05cb1c0d030febb) }

var fileDescriptor_e05cb1c0d030febb = []byte{
	// 1104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4f, 0x53, 0xdb, 0x46,
	0x14, 0x47, 0xb6, 0x30, 0xe6, 0x19, 0x1b, 0x75, 0xa1, 0x45, 0x90, 0x60, 0x13, 0x4f, 0xdb, 0xa1,
	0xa4, 0xd8, 0x25, 0x99, 0xb6, 0x33, 0xcd, 0xc9, 0xc6, 0x4a, 0x31, 0xc3, 0x60, 0x57, 0x52, 0xcc,
	0xa4, 0x17, 0x8d, 0x8c, 0x14, 0x5b, 0x53, 0x4b, 0xeb, 0x6a, 0xd7, 0x0e, 0xfe, 0x08, 0xbd, 0xe5,
	0xd8, 0x99, 0x7e, 0x8d, 0x4c, 0x3f, 0x43, 0x4e, 0x9d, 0x4c, 0x0e, 0xfd, 0x73, 0x71, 0x5b, 0xb8,
	0xf1, 0x29, 0x32, 0x5a, 0xad, 0xb0, 0x2d, 0xc8, 0xc0, 0x49, 0xd2, 0x7b, 0xbf, 0xdf, 0xef, 0xbd,
	0xdd, 0xf7, 0xd3, 0x4a, 0xb0, 0x76, 0x8a, 0x89, 0x8b, 0x49, 0xb9, 0x83, 0x87, 0xe5, 0xe1, 0x5e,
	0x70, 0x29, 0xf5, 0x7d, 0x4c, 0x31, 0xca, 0x86, 0x89, 0x52, 0x10, 0x19, 0xee, 0x6d, 0xe4, 0x39,
	0xae, 0x6d, 0x12, 0xbb, 0x3c, 0xdc, 0x6b, 0xdb, 0xd4, 0xdc, 0x2b, 0x9f, 0x62, 0xc7, 0x0b, 0xe1,
	0x1b, 0xab, 0x1d, 0xdc, 0xc1, 0xec, 0xb6, 0x1c, 0xdc, 0xf1, 0x68, 0xa1, 0x83, 0x71, 0xa7, 0x67,
	0x97, 0xd9, 0x53, 0x7b, 0xf0, 0xa2, 0x4c, 0x1d, 0xd7, 0x26, 0xd4, 0x74, 0xfb, 0x1c, 0xb0, 0x1e,
	0x07, 0x98, 0xde, 0x88, 0xa7, 0xf2, 0xf1, 0x94, 0x35, 0xf0, 0x4d, 0xea, 0xe0, 0xa8, 0xe2, 0x7a,
	0xd8, 0x91, 0x11, 0x16, 0xe5, 0xdd, 0xb2, 0x87, 0x22, 0x06, 0x74, 0x62, 0x3b, 0x9d, 0x2e, 0xb5,
	0xad, 0x16, 0xa6, 0x76, 0xa3, 0x1f, 0xd0, 0xd0, 0x1e, 0xa4, 0x30, 0xbb, 0x93, 0x85, 0x2d, 0x61,
	0x3b, 0xf7, 0x68, 0xbd, 0x34, 0xb3, 0xc4, 0xd2, 0x04, 0xaa, 0x72, 0x20, 0xfa, 0x1c, 0x52, 0x2f,
	0x99, 0x90, 0x9c, 0xd8, 0x12, 0xb6, 0x17, 0xab, 0xb9, 0x77, 0xaf, 0x77, 0x81, 0xb3, 0x6a, 0xf6,
	0xa9, 0xca, 0xb3, 0xc5, 0xdf, 0x04, 0x58, 0xa8, 0xd9, 0x7d, 0x4c, 0x1c, 0x8a, 0x0a, 0x90, 0xe9,
	0xfb, 0xb8, 0x8f, 0x89, 0xd9, 0x33, 0x1c, 0x8b, 0xd5, 0x12, 0x55, 0x88, 0x42, 0x75, 0x0b, 0x7d,
	0x03, 0x8b, 0x56, 0x88, 0xc5, 0x3e, 0xd7, 0x95, 0xdf, 0xbd, 0xde, 0x5d, 0xe5, 0xba, 0x15, 0xcb,
	0xf2, 0x6d, 0x42, 0x34, 0xea, 0x3b, 0x5e, 0x47, 0x9d, 0x40, 0xd1, 0xb7, 0x90, 0x32, 0x5d, 0x3c,
	0xf0, 0xa8, 0x9c, 0xdc, 0x4a, 0x6e, 0x67, 0x26, 0xfd, 0x07, 0x33, 0x29, 0xf1, 0x99, 0x94, 0xf6,
	0xb1, 0xe3, 0x55, 0xc5, 0x37, 0xe3, 0xc2, 0x9c, 0xca, 0xe1, 0xc5, 0x3f, 0x45, 0x48, 0x37, 0x79,
	0x7d, 0x94, 0x83, 0xc4, 0x55, 0x57, 0x09, 0xc7, 0x42, 0x5f, 0x41, 0xda, 0xb5, 0x09, 0x31, 0x3b,
	0x36, 0x91, 0x13, 0x4c, 0x77, 0xb5, 0x14, 0xee, 0x7c, 0x29, 0xda, 0xf9, 0x52, 0xc5, 0x1b, 0xa9,
	0x57, 0x28, 0xf4, 0x35, 0xa4, 0x08, 0x35, 0xe9, 0x80, 0xc8, 0x49, 0xb6, 0x8f, 0x9b, 0xb1, 0x7d,
	0x8c, 0x4a, 0x69, 0x0c, 0xa4, 0x72, 0x30, 0x3a, 0x00, 0xf4, 0xc2, 0xf1, 0xcc, 0x9e, 0x41, 0xcd,
	0x5e, 0x6f, 0x64, 0xf8, 0x36, 0x19, 0xf4, 0xa8, 0x2c, 0x6e, 0x09, 0xdb, 0x99, 0x47, 0x1b, 0x31,
	0x09, 0x3d, 0x80, 0xa8, 0x0c, 0xa1, 0x4a, 0x8c, 0x35, 0x15, 0x41, 0x15, 0xc8, 0x90, 0x41, 0xdb,
	0x75, 0xa8, 0x11, 0xd8, 0x49, 0x9e, 0xe7, 0x12, 0xf1, 0xae, 0xf5, 0xc8, 0x6b, 0x55, 0xf1, 0xd5,
	0xbf, 0x05, 0x41, 0x85, 0x90, 0x14, 0x84, 0xd1, 0x21, 0x48, 0x7c, 0x63, 0x0d, 0xdb, 0xb3, 0x42,
	0x9d, 0xd4, 0x1d, 0x75, 0x72, 0x9c, 0xa9, 0x78, 0x16, 0xd3, 0xaa, 0x41, 0x96, 0x62, 0x6a, 0xf6,
	0x0c, 0x1e, 0x97, 0x17, 0xee, 0x36, 0x9e, 0x25, 0xc6, 0x8a, 0x6c, 0x73, 0x04, 0x1f, 0x0d, 0x31,
	0x75, 0xbc, 0x8e, 0x41, 0xa8, 0xe9, 0xf3, 0xa5, 0xa5, 0xef, 0xd8, 0xd2, 0x72, 0x48, 0xd5, 0x02,
	0x26, 0xeb, 0xe9, 0x00, 0x78, 0x68, 0xb2, 0xbc, 0xc5, 0x3b, 0x6a, 0x65, 0x43, 0x62, 0xb4, 0xba,
	0x8d, 0xc0, 0x1f, 0xd4, 0xb4, 0x4c, 0x6a, 0xca, 0x10, 0x98, 0x55, 0xbd, 0x7a, 0x2e, 0xfe, 0x25,
	0x40, 0x66, 0x7a, 0x30, 0x0f, 0x61, 0x71, 0x64, 0x13, 0xe3, 0x94, 0x99, 0x54, 0xb8, 0xf6, 0xc6,
	0xd4, 0x3d, 0xaa, 0xa6, 0x47, 0x36, 0xd9, 0x0f, 0xf2, 0xe8, 0x31, 0x64, 0xcd, 0x36, 0xa1, 0xa6,
	0xe3, 0x71, 0x42, 0xe2, 0x46, 0xc2, 0x12, 0x07, 0x85, 0xa4, 0x2f, 0x20, 0xed, 0x61, 0x8e, 0x4f,
	0xde, 0x88, 0x5f, 0xf0, 0x70, 0x08, 0x7d, 0x02, 0xc8, 0xc3, 0xc6, 0x4b, 0x87, 0x76, 0x8d, 0xa1,
	0x4d, 0x23, 0x92, 0x78, 0x23, 0x69, 0xd9, 0xc3, 0x27, 0x0e, 0xed, 0xb6, 0x6c, 0x1a, 0x92, 0x8b,
	0xbf, 0x0b, 0x20, 0x06, 0xe7, 0xc1, 0xed, 0x6f, 0x73, 0x09, 0xe6, 0x87, 0x98, 0xda, 0xb7, 0xbf,
	0xc9, 0x21, 0x0c, 0x3d, 0x81, 0x85, 0xf0, 0x70, 0x21, 0xb2, 0xc8, 0x7c, 0xf2, 0x20, 0xe6, 0xfd,
	0xeb, 0x27, 0x97, 0x1a, 0x31, 0x66, 0x86, 0x31, 0x3f, 0x3b, 0x8c, 0x43, 0x31, 0x9d, 0x94, 0xc4,
	0xe2, 0x3f, 0x02, 0x64, 0xb9, 0xa5, 0x9a, 0xa6, 0x6f, 0xba, 0x04, 0x3d, 0x87, 0x8c, 0xeb, 0x78,
	0x57, 0xe6, 0x14, 0x6e, 0x33, 0xe7, 0x66, 0x60, 0xce, 0xcb, 0x71, 0xe1, 0xe3, 0x29, 0xd6, 0x97,
	0xd8, 0x75, 0xa8, 0xed, 0xf6, 0xe9, 0x48, 0x05, 0xd7, 0xf1, 0x22, 0xcf, 0xba, 0x80, 0x5c, 0xf3,
	0x2c, 0x02, 0x19, 0x7d, 0xdb, 0x77, 0xb0, 0xc5, 0x36, 0x22, 0xa8, 0x10, 0x37, 0x5a, 0x8d, 0x9f,
	0xdf, 0xd5, 0x4f, 0x2f, 0xc7, 0x85, 0xfb, 0xd7, 0x89, 0x93, 0x22, 0xbf, 0x06, 0x3e, 0x94, 0x5c,
	0xf3, 0x2c, 0x5a, 0x09, 0xcb, 0x17, 0x75, 0x58, 0x6a, 0x31, 0x6f, 0xf2, 0x95, 0xd5, 0x80, 0x7b,
	0x35, 0xaa, 0x2c, 0xdc, 0x56, 0x59, 0x64, 0xca, 0x4b, 0x21, 0x8b, 0xab, 0xfe, 0x1f, 0x99, 0x98,
	0xab, 0x7e, 0x07, 0xa9, 0x9f, 0x07, 0xd8, 0x1f, 0xb8, 0xdc, 0xc1, 0xc5, 0xcb, 0x71, 0x41, 0x0a,
	0x23, 0x93, 0x0e, 0xe3, 0xdf, 0x81, 0x30, 0x8f, 0xf6, 0x61, 0x91, 0x76, 0x7d, 0x9b, 0x74, 0x71,
	0xcf, 0xe2, 0x86, 0xf8, 0xec, 0x72, 0x5c, 0x58, 0xb9, 0x0a, 0x7e, 0x50, 0x61, 0xc2, 0x43, 0x3f,
	0x40, 0x8e, 0x19, 0x76, 0xa2, 0x14, 0x3a, 0x7d, 0xe7, 0x72, 0x5c, 0x90, 0x67, 0x33, 0x1f, 0x94,
	0xcb, 0x06, 0x38, 0x3d, 0x82, 0xed, 0xfc, 0x22, 0x00, 0x4c, 0x7d, 0x09, 0xef, 0xc1, 0x5a, 0xab,
	0xa1, 0x2b, 0x46, 0xa3, 0xa9, 0xd7, 0x1b, 0xc7, 0xc6, 0xb3, 0x63, 0xad, 0xa9, 0xec, 0xd7, 0x9f,
	0xd6, 0x95, 0x9a, 0x34, 0x87, 0x56, 0x60, 0x79, 0x3a, 0xf9, 0x5c, 0xd1, 0x24, 0x01, 0xad, 0xc1,
	0xca, 0x74, 0xb0, 0x52, 0xd5, 0xf4, 0x4a, 0xfd, 0x58, 0x4a, 0x20, 0x04, 0xb9, 0xe9, 0xc4, 0x71,
	0x43, 0x4a, 0xa2, 0xfb, 0x20, 0xcf, 0xc6, 0x8c, 0x93, 0xba, 0x7e, 0x60, 0xb4, 0x14, 0xbd, 0x21,
	0x89, 0x3b, 0x7f, 0x08, 0x90, 0x9b, 0xfd, 0x44, 0xa0, 0x02, 0xdc, 0x6b, 0xaa, 0x8d, 0x66, 0x43,
	0xab, 0x1c, 0x19, 0x9a, 0x5e, 0xd1, 0x9f, 0x69, 0xb1, 0x9e, 0x8a, 0x90, 0x8f, 0x03, 0x6a, 0x4a,
	0xb3, 0xa1, 0xd5, 0x75, 0xa3, 0xa9, 0xa8, 0xf5, 0x46, 0x4d, 0x12, 0xd0, 0x03, 0xd8, 0x8c, 0x63,
	0x5a, 0x0d, 0xbd, 0x7e, 0xfc, 0x7d, 0x04, 0x49, 0xa0, 0x0d, 0xf8, 0x24, 0x0e, 0x69, 0x56, 0x34,
	0x4d, 0xa9, 0x85, 0x4d, 0xc7, 0x73, 0xaa, 0x72, 0xa8, 0xec, 0xeb, 0x4a, 0x4d, 0x12, 0x6f, 0x62,
	0x3e, 0xad, 0xd4, 0x8f, 0x94, 0x9a, 0x34, 0x5f, 0x55, 0xde, 0x9c, 0xe7, 0x85, 0xb7, 0xe7, 0x79,
	0xe1, 0xbf, 0xf3, 0xbc, 0xf0, 0xea, 0x22, 0x3f, 0xf7, 0xf6, 0x22, 0x3f, 0xf7, 0xf7, 0x45, 0x7e,
	0xee, 0xc7, 0x87, 0x1d, 0x87, 0x76, 0x07, 0xed, 0xd2, 0x29, 0x76, 0xf9, 0x0f, 0x0a, 0xbf, 0xec,
	0x12, 0xeb, 0xa7, 0xf2, 0x19, 0xfb, 0xe9, 0xa2, 0xa3, 0xbe, 0x4d, 0x82, 0x3f, 0xaa, 0x14, 0xb3,
	0xeb, 0xe3, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x73, 0xa8, 0x09, 0x8c, 0x92, 0x09, 0x00, 0x00,
}

func (m *OldVotingParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldVotingParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldVotingParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPeriod != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.VotingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.VotingPeriod):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintGov(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *OldVotingParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.VotingPeriod)
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *OldVotingParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotingPeriod == nil {
				m.VotingPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
